#!/usr/bin/env python

import sys, argparse

from pytcf.parser import parseTokens
from pytcf.token import writeCsv, default_fields
from signal import signal, SIGPIPE, SIG_DFL

# in case you pipe output like in tcf2csv ... | head
# see https://stackoverflow.com/questions/14207708/ioerror-errno-32-broken-pipe-python
signal(SIGPIPE,SIG_DFL)

parser = argparse.ArgumentParser(description="Convert a file from Text Corpus Format (TCF) into CSV.")
parser.add_argument("infile",
                    help="The TCF input file")
parser.add_argument("-H", "--no-header",
                    help="Do not include a header in the csv output. By default, it does.",
                    action="store_false")
parser.add_argument("-o", "--outfile",
                    help="The CSV output file. Writing to stdout if not specified.")
parser.add_argument("-f", "--fields",
                    help="List of the fields contained in the output. The list should be given as a quoted string and the elements delimited by space. Default: \"" + ' '.join(default_fields) + "\"",
                    default=' '.join(default_fields))
args = parser.parse_args()

ts = parseTokens(args.infile)

writeCsv(ts, args.outfile, header=args.no_header, attrs = args.fields.split())
